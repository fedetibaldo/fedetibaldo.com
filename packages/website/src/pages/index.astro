---
import type { CollectionEntry } from "astro:content";
import Layout, { sidebarImageSizes } from "../layout/Layout.astro";
import { getEntry } from "astro:content";
import { render } from "astro:content";
import { tagEnum, type TagEnum } from "../components/tag";
import {
	SidebarFilter,
	type CheckboxField,
	type RadioField,
} from "../components/sidebar-filter";
import { Entries } from "../components/entries";
import { z } from "astro:schema";

export const prerender = false;

const home = await getEntry("pages", "home");

const getPageContentOrNull = async (page?: CollectionEntry<"pages">) => {
	if (!page) return null;
	const { Content } = await render(page);
	return Content;
};

const Content = await getPageContentOrNull(home);

const outdatedCheckbox: CheckboxField = {
	type: "checkbox",
	name: "show_outdated",
	label: "Show outdated",
	resetValue: false,
	value: Boolean(Astro.url.searchParams.get("show_outdated")),
	checkedMessage: null,
	uncheckedMessage: "hide outdated",
};

const tagRadioFallback = () => {
	return z.any().transform<"all">(() => "all");
};

const tagRadio: RadioField<TagEnum | "all"> = {
	type: "radio",
	name: "tag",
	label: "Filter by tag",
	options: [
		{ value: "all", label: "All", message: null },
		...tagEnum.options.map((tag) => ({ value: tag, label: tag, message: tag })),
	],
	resetValue: "all",
	value: tagEnum
		.or(tagRadioFallback())
		.parse(Astro.url.searchParams.get("tag")),
};

const formFields = [tagRadio, outdatedCheckbox];
---

<Layout title={home?.data.title} description={home?.data.description}>
	<article class="prose prose-lg prose-invert max-w-none">
		{Content && <Content />}
	</article>
	<Fragment slot="sidebar">
		<SidebarFilter
			class="sticky top-0"
			emptyFilterMessage="no filter"
			action="/#sidebar"
			formFields={formFields}
		/>
		<Entries
			imageSizes={sidebarImageSizes}
			filter={{
				...(tagRadio.value == "all" ? {} : { tags: [tagRadio.value] }),
				isOutdated: outdatedCheckbox.value,
			}}
		/>
	</Fragment>
</Layout>
