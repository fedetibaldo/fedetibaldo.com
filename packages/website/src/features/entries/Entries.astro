---
import { getCollection } from "astro:content";
import PostCard from "./cards/PostCard.astro";
import GameCard from "./cards/GameCard.astro";
import type { LocalImageProps } from "astro:assets";

type Props = {
	imageSizes?: Pick<LocalImageProps, "sizes" | "widths"> | undefined;
	filter: {
		ids?: string[];
		tags?: string[];
		isOutdated?: boolean;
	};
	limit?: number;
};

const { imageSizes, filter, limit = Infinity } = Astro.props;

const entries = (
	await getCollection("entries", (entry) => {
		if (filter.ids && !filter.ids.includes(entry.id)) {
			return false;
		}
		if (filter.tags && !filter.tags.includes(entry.data.tag.id)) {
			return false;
		}
		if (
			typeof filter.isOutdated != "undefined" &&
			entry.data.type == "post" &&
			entry.data.isOutdated != filter.isOutdated
		) {
			return false;
		}
		return true;
	})
)
	.sort(
		(entryA, entryZ) =>
			entryZ.data.createdAt.getTime() - entryA.data.createdAt.getTime(),
	)
	.slice(0, limit);
---

<div class="space-y-6">
	{
		entries.length > 0 ? (
			entries.map((entry) => {
				const data = entry.data;
				switch (data.type) {
					case "post":
						return (
							<PostCard imageSizes={imageSizes} post={{ ...entry, data }} />
						);
					case "game":
						return (
							<GameCard imageSizes={imageSizes} game={{ ...entry, data }} />
						);
				}
			})
		) : (
			<p>No entries matched your filter</p>
		)
	}
</div>
